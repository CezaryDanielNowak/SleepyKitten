import React from 'react';
import BaseComponent from 'components/BaseComponent';
import Spinner from 'components/Spinner';

// when request is finished in less than TIMEOUT_THROTTLE, loader will not be shown
const TIMEOUT_THROTTLE = 250;

export default class GlobalLoader extends BaseComponent {
  className = 'sk-GlobalLoader';

  state = {
    isLoading: true
  };

  timeout = null;

  toggleLoader = (xhrCount) => {
    if (xhrCount === 0) {
      clearTimeout(this.timeout);
      this.timeout = null;
      this.toggle(false);
    } else if (this.timeout === null) {
      this.timeout = setTimeout(() => {
        this.timeout = null;
        this.toggle(true);
      }, TIMEOUT_THROTTLE);
    }
  }

  toggle = (isLoading) => {
    const state = {
      isLoading
    };
    if (!isLoading) {
      state.message = '';
    }
    this.setState(state);
  }

  setMessage = (message) => {
    this.setState({
      message
    });
  }

  componentDidMount() {
    // HTML generated by backend needs to have GlobalLoader spinning until JS loads
    // and executes.
    /* eslint-disable */
    this.setState({ isLoading: false });
    /* eslint-enable */
    this.subscribe('XHR', this.toggleLoader);
    this.subscribe('GlobalLoader--toggle', this.toggle);
    this.subscribe('GlobalLoader--setMessage', this.setMessage);
  }

  render() {
    if (this.state.isLoading) {
      return (
        <div className={ this.rootcn`` }>
          <Spinner
            className={ this.cn('__spinner') }
          />
          { this.state.message
            ? (
              <div className={ this.cn`__message` }>
                <div className={ this.cn`__message-text` }>
                  { this.state.message }
                </div>
              </div>
            )
            : null
          }

        </div>
      );
    }
    return null;
  }
}
